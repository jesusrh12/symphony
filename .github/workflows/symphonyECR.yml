name: Build
on:
  push:
    branches:
      - main # or the name of your main branch
    paths-ignore:
      - infra/**
      - skaffold/**
      - tools/**
      - app/mobile/**
      
jobs:
 unit-test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql
        env:
          MYSQL_ROOT_PASSWORD: root
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping -proot"
          --health-interval 10s
          --health-start-period 10s
          --health-timeout 5s
          --health-retries 10
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '1.15'
      - uses: actions/cache@v2
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-
      - name: Download dependencies
        run: go mod download
      - name: Run tests
        env:
          DB_URL: mysql://root:root@localhost:3306/?charset=utf8&parseTime=true&interpolateParams=true
        run: go test -race ./...
        
 test-services:
    runs-on: ubuntu-latest
    needs: unit-test
    env:
      COMPOSE_FILE: integration/docker-compose.pr.yaml
      COMPOSE_DOCKER_CLI_BUILD: 1
      DOCKER_BUILDKIT: 1
    steps:
      - uses: actions/checkout@v2
      - name: docker compose
        run: docker-compose build --parallel
      - name: docker images
        run: docker images
      - name: Start services
        run: docker-compose up -d --scale tests=0 --scale pytests=0
      - name: Run go tests
        run: docker-compose run --use-aliases tests
      - name: Run python tests
        run: docker-compose run --use-aliases pytests
      - name: Stop services
        if: ${{ always() }}
        run: docker-compose down
      
 login-aws:
    runs-on: ubuntu-latest
    needs: [unit-test, test-services ]
    env: 
      COMPOSE_FILE: integration/docker-compose.pr.yaml
      COMPOSE_DOCKER_CLI_BUILD: 1
      DOCKER_BUILDKIT: 1
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS Credentials for build and deploy
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ECR_ACCESS_ID }}
          aws-secret-access-key: ${{ secrets.ECR_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}         
      - name: Amazon ECR "Login" Action for GitHub Actions
        uses: aws-actions/amazon-ecr-login@v1
      - name: login ecr
        run: aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 759857925977.dkr.ecr.us-east-1.amazonaws.com
      - name: docker tag
        run: docker tag integration_graph:latest 759857925977.dkr.ecr.us-east-1.amazonaws.com/symphony:latest
      - name: docker push
        run: docker push 759857925977.dkr.ecr.us-east-1.amazonaws.com/symphony:latest
