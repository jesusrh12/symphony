name: Build
on:
  push:
    branches:
      - main # or the name of your main branch
    paths-ignore:
      - infra/**
      - skaffold/**
      - tools/**
      - app/mobile/**
      
jobs:
 unit-test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql
        env:
          MYSQL_ROOT_PASSWORD: root
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping -proot"
          --health-interval 10s
          --health-start-period 10s
          --health-timeout 5s
          --health-retries 10
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '1.15'
     
      - uses: actions/cache@v2
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-         
      - name: Download dependencies
        run: go mod download
      - name: Run tests
        env:
          DB_URL: mysql://root:root@localhost:3306/?charset=utf8&parseTime=true&interpolateParams=true
        run: go test -race -v -cover ./...  

 sonarqube:
    runs-on: ubuntu-latest
    needs: unit-test
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0   
      - name: Sonar Scan
        run: |
              go version &&
              go test -coverprofile=coverage.out -covermode=count -json > report.json . &&
              ls -lah
              exit 0
      - name: Fix code coverage paths
        working-directory: .
        run: |
              sed -i 's@'$GITHUB_WORKSPACE'@/github/workspace/@g' report.json
      - uses: sonarsource/sonarqube-scan-action@master 
        with:
            projectBaseDir: .
            args: >
              -Dsonar.go.coverage.reportPaths=report.json
              -Dsonar.go.tests.reportPaths=report.json
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          LC_ALL: "ru_RU.UTF-8"

      - name: SonarQube Quality Gate check
        uses: sonarsource/sonarqube-quality-gate-action@master
        with:
          scanMetadataReportFile: .scannerwork/report-task.txt
        # Force to fail step after specific time
        timeout-minutes: 6
        env:
         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
