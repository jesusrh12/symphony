name: Build
on:
  push:
    branches:
      - main # or the name of your main branch
    paths-ignore:
      - infra/**
      - skaffold/**
      - tools/**
      - app/mobile/**      
jobs:

 lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.32
          skip-go-installation: true
          
 unit-test:
    runs-on: ubuntu-latest
    needs: lint
    services:
      mysql:
        image: mysql
        env:
          MYSQL_ROOT_PASSWORD: root
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping -proot"
          --health-interval 10s
          --health-start-period 10s
          --health-timeout 5s
          --health-retries 10
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '1.15'     
      - uses: actions/cache@v2
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-         
      - name: Download dependencies
        run: go mod download
      - name: Run tests
        env:
          DB_URL: mysql://root:root@localhost:3306/?charset=utf8&parseTime=true&interpolateParams=true
        run: go test -race -cover -v ./...  
 sonarqube:
    runs-on: ubuntu-latest
    needs: [lint, unit-test]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0   
      - name: Sonar Scan
        run: |
              go version &&
              go test -coverprofile=coverage.out -covermode=count -json > report.json ./...
              exit 0
      - name: lista archivos
        run: ls -la && pwd
      - uses: sonarsource/sonarqube-scan-action@master 
        with:
            projectBaseDir: .
            args: >
              -Dsonar.projectKey=jesusrh12_symphony-master
              -Dsonar.go.coverage.reportPaths=**/*coverage.out
              -Dsonar.go.tests.reportPaths=report.json      
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      - name: SonarQube Quality Gate check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          scanMetadataReportFile: .scannerwork/report-task.txt
          # Force to fail step after specific time
          timeout-minutes: 2

 build-artifact:
    name: build ${{ matrix.image }}
    runs-on: ubuntu-latest
    needs: [lint, unit-test,sonarqube]
    env: 
      ECR_REGISTRY: 837232691946.dkr.ecr.us-east-2.amazonaws.com
      ECR_REPOSITORY: symphony-ecr-aws
      IMAGE_TAG: V1.0

    strategy:
      matrix:
        include:
          - image: graph
            context: .
            file: graph/Dockerfile
          - image: admin
            context: .
            file: admin/Dockerfile
          - image: async
            context: .
            file: async/Dockerfile
          - image: store
            context: .
            file: store/Dockerfile
          - image: migrate
            context: .
            file: migrate/Dockerfile
          - image: jobrunner
            context: .
            file: jobrunner/Dockerfile
          - image: front
            context: app
            file: app/fbcnms-projects/platform-server/Dockerfile.prod
          - image: docs
            context: docs
            file: docs/Dockerfile
          - image: storybook
            context: app
            file: app/fbcnms-projects/storybook/Dockerfile

    steps:
      - uses: actions/checkout@v2
      - uses: docker/setup-buildx-action@v1
      - uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: ${{ runner.os }}-buildx-

      - name: Configure AWS Credentials for build and deploy ECR 40
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ECR_ACCESS_ID }}
          aws-secret-access-key: ${{ secrets.ECR_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Amazon ECR "Login" Action for GitHub Actions
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: login ECR
        run: aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_REGISTRY

      - name: docker images
        run: docker images

      #- name: docker tag
      #  run: docker tag graph $ECR_REGISTRY/$ECR_REPOSITORY:graph_$IMAGE_TAG
      
      - name: docker push
        uses: docker/build-push-action@v2
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.file }}
          tags: 837232691946.dkr.ecr.us-east-2.amazonaws.com/symphony-ecr-aws:${{ matrix.image }}_v1.1
          pull: true
          push: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max

